"""Maintainer handlers for bot maintenance commands."""

import logging
from typing import Optional

from telegram import Update
from telegram.ext import ContextTypes

from lang_focus.core.database import DatabaseManager
from lang_focus.core.locale_manager import LocaleManager
from lang_focus.core.keyboard_manager import KeyboardManager
from lang_focus.core.reminder_scheduler import ReminderScheduler
from lang_focus.config.settings import BotConfig

logger = logging.getLogger(__name__)


class MaintainerHandlers:
    """Handler for maintainer commands."""

    def __init__(
        self,
        locale_manager: LocaleManager,
        keyboard_manager: KeyboardManager,
        database: DatabaseManager,
        config: BotConfig,
        reminder_scheduler: Optional[ReminderScheduler] = None
    ):
        self.locale_manager = locale_manager
        self.keyboard_manager = keyboard_manager
        self.database = database
        self.config = config
        self.reminder_scheduler = reminder_scheduler

    def is_maintainer(self, user_id: int) -> bool:
        """Check if user is the maintainer."""
        return self.config.maintainer_id and user_id == self.config.maintainer_id

    async def handle_force_reminder(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Force send a reminder to a specific user or all users."""
        if not update.effective_user or not update.message:
            return

        user_id = update.effective_user.id

        # Check maintainer permission
        if not self.is_maintainer(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ maintainer.")
            return

        if not self.reminder_scheduler:
            await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
            return

        # Parse command arguments
        if context.args and len(context.args) > 0:
            arg = context.args[0].lower()

            if arg == "all":
                # Send to all users
                sent_count = await self.reminder_scheduler.force_send_reminder_to_all()
                await update.message.reply_text(
                    f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
                )
            else:
                # Try to parse as user ID
                try:
                    target_user_id = int(context.args[0])
                    success = await self.reminder_scheduler.force_send_reminder(target_user_id)

                    if success:
                        await update.message.reply_text(
                            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}"
                        )
                    else:
                        await update.message.reply_text(
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}"
                        )
                except ValueError:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n"
                        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                        "/force_reminder - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–±–µ\n"
                        "/force_reminder all - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º\n"
                        "/force_reminder [user_id] - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
                    )
        else:
            # No args - send to self
            success = await self.reminder_scheduler.force_send_reminder(user_id)

            if success:
                await update.message.reply_text(
                    f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∞–º"
                )
            else:
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
                )

    async def handle_reminder_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Show reminder system statistics."""
        if not update.effective_user or not update.message:
            return

        user_id = update.effective_user.id

        # Check maintainer permission
        if not self.is_maintainer(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ maintainer.")
            return

        if not self.reminder_scheduler:
            await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
            return

        stats = await self.reminder_scheduler.get_reminder_stats()

        message = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:**\n\n"
        message += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_tracked_users', 0)}\n"
        message += f"‚úÖ –° –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏: {stats.get('reminders_enabled', 0)}\n"
        message += f"üì¨ –ü–æ–ª—É—á–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {stats.get('users_reminded', 0)}\n"
        message += f"üìà –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {stats.get('avg_reminders_per_user', 0):.1f}\n"

        await update.message.reply_text(message, parse_mode="Markdown")

    async def handle_toggle_reminders(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Toggle reminders for a user."""
        if not update.effective_user or not update.message:
            return

        user_id = update.effective_user.id

        if not self.reminder_scheduler:
            await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
            return

        # Parse command
        if context.args and len(context.args) > 0:
            action = context.args[0].lower()
            enable = action in ['on', '–≤–∫–ª—é—á–∏—Ç—å', 'enable']
            disable = action in ['off', '–≤—ã–∫–ª—é—á–∏—Ç—å', 'disable']

            if not enable and not disable:
                await update.message.reply_text(
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reminders [on|off]\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: /reminders off"
                )
                return

            success = await self.reminder_scheduler.toggle_reminders(user_id, enable)

            if success:
                if enable:
                    await update.message.reply_text(
                        "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!\n"
                        "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π."
                    )
                else:
                    await update.message.reply_text(
                        "üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.\n"
                        "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
                    )
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        else:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reminders [on|off]\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /reminders off"
            )

    async def handle_maintainer_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Show maintainer help."""
        if not update.effective_user or not update.message:
            return

        user_id = update.effective_user.id

        if not self.is_maintainer(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ maintainer.")
            return

        help_text = """üîß **–ö–æ–º–∞–Ω–¥—ã maintainer:**

/force_reminder - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–±–µ
/force_reminder all - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
/force_reminder [user_id] - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
/reminder_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
/maintainer_help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**
/reminders on - –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/reminders off - –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""

        await update.message.reply_text(help_text, parse_mode="Markdown")